{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14380\viewh16220\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs48 \cf0 Outline for JS all the Things Talk
\fs24 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs30 \cf0 Beginning
\fs24 \
So, just a little background. \
I've been using JavaScript for the larger part of 14 years. Most of that spent finding scripts that did what I wanted on other sites and then borrowing them for my sites. It wasn't until I started doing ActionScript development 10 years ago that I actually started understanding JavaScript as a language and it wasn't until AJAX got popular that I started using it as a primary language for interactions. Fortunately,or unfortunately, depending on how you look at it, this was before many of the current frameworks got popular. Even jQuery. \
\
Many of you are probably wondering what's my angle with a pure vanilla JS talk. So before we start, let me say:\
\
This is not an anti-framework talk.\
It's not an anti-jquery talk.\
\
Put simply, I believe to be a good programmer you need to know the things your tools do for you. Many people rely on frameworks and have no idea what they do under the hood. But by knowing what your tools do for you and how, you can better decide when they are right to use, and when not; how to fix them if they break and how to make them better. Also, knowing how to do what the tools do, you will be better at programming in general, and better understand the language as a whole. \
\
Last thing I want to say is, this all could be better. The purpose is for illustration. You should no put this code directly into production without some clean up an a lot of testing.\
\
Let's get started. \
\

\fs30 2. Explain that the DOM should be thought of as one big JS object and JS is in itself a language for the purpose of manipulating this object. \
\
So, the document is root of this object, then the head is the first child with body being it's sibling, and so on and so on. In JSON this would be:\
\
\{\
    "body": \{\
        "head": \{\
        \},\
         "body": \{\
        \}\
   \}\
\} \
\
3. List some of the methods you can perform directly on the DOM and that we will use today.\
Event\
- createElement\
- appendChild\
- setAttribute\
- childNodes\
- parentNode\
- getElementById\
- removeChild\
- replace\
- innerHTML\
- querySelectAll\
- attributes\
- dispatchEvent\
- initEvent\
\
Of course there are other functions built into the language to round it out, such as variable manipulations and events, along with a object class system.\
\

\b\fs42 The Code
\b0\fs24 \

\fs30 1. Setup HTML file and include controller.\
<script src="scripts/controller.js"></script>\
\
4. Now, let's go over creating a HEAD to our document, and setting an id to show. We are going to put this into functions so we can call it in a step-by-step process so it's easier to see.\
var wait = 200;\
// create head elements\
function createHead() \{\
    // check that the head element is not already there\
    if ( !document.head ) \{\
        console.log( 'create head' );\
        var head = document.createElement( 'head' );\
        document.appendChild( head );\
    \} else \{\
        console.log( 'create head' );\
        var head = document.head;\
    \}\
    // for fun, let's set an id on the header\
    head.setAttribute( 'id' , 'the_main_head' );\
    return true;\
\}\
\
createHead()\
\
5. Next, we need to create a body element.\
function createBody() \{\
    // check to see if we have the body element\
    if ( !document.body ) \{\
        // create body element\
        var body = document.createElement( 'body' );\
        // add to dom\
        document.childNodes[ 0 ].appendChild( body );\
    \} else \{\
        var body = document.body;\
    \}\
    // change the id now that we have a body\
    body.setAttribute( "id", "the_body" );\
\}\
\
Now we're going to call it from inside a wait method so we can see it happen.\
setTimeout(createBody, wait + 200 );\
\
6. We're going to need load more script in the future so the next thing we will do is create a script loading function. \
function createScript( scriptLocation ) \{\
    // create the script element\
    var script = document.createElement('script');\
    // set source\
    script.src = scriptLocation;\
    // now append to head\
    document.head.appendChild( script );\
\}\
\
After this we'll update our call to create the head element and put it inside an if to insure it loads before calling our new createScript method.\
if ( setTimeout( createHead, wait ) ) \{\
    setTimeout( createScript, wait + 200, 'scripts/body.js' );\
\}\
\
7. Let's extend the createScript() method so we can see when the script is done loading\
function createScript( scriptLocation ) \{\
    // create the script element\
    var script = document.createElement('script');\
    // set source\
    script.src = scriptLocation;\
    // add listener for when script is loaded\
    script.onload = script.onreadystatechange = function() \{\
        // check the state to see if script is loaded\
        if ((!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) \{\
            console.log( 'We are loaded' );\
        \}\
    \}\
    // now append to head\
    document.head.appendChild( script );\
\}\
\
This allows us to chain on some other functionality insuring the load order happens correctly. Because JS is an asynchronous language, functions called one after the other can be called in any unpredictable order unless the latter class relies on a response of the former.  \
\
8. So let's take what we just did and turn it into a script loading method which can handle a list of scripts to load.\
function loadScripts(scripts, position) \{\
    // create the script element\
    var script = document.createElement('script');\
    // set source\
    script.src = scripts[position];\
    // add listener for when script is loaded\
    script.onload = script.onreadystatechange = function() \{\
        // check the state to see if script is loaded\
        if ((!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) \{\
            // increment position\
            position++;\
            // on success check to see if we are at the end of the scripts to load\
            if (scripts.length === position) \{\
                return false;\
            \}\
            // if not call function to load next script\
            loadScripts( scripts, position );\
        \}\
    \}\
    // now append to head\
    document.head.appendChild( script );\
\}\
\
// Before showing body, write this\
function getWait() \{\
    return wait = wait + 200;\
\}\
\
To see this in action, let's update our createScript() method to add more scripts after the first script has been added. \
function createScript( scriptLocation ) \{\
    // create the script element\
    var script = document.createElement('script');\
    // set source\
    script.src = scriptLocation;\
    // add listener for when script is loaded\
    script.onload = script.onreadystatechange = function() \{\
        // check the state to see if script is loaded\
        if ((!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) \{\
            // 9 first do console then add this\
            // now that the script is loaded, let's load the rest in one function\
            // define scripts to load\
            var scripts = [\
                "scripts/body_controller.js",\
                "scripts/listeners.js",\
                "scripts/ajax.js",\
                "scripts/hoppy_people.js",\
                "scripts/bindings.js",\
            ];\
            // call function to load scripts\
            setTimeout(loadScripts, wait + 100, scripts, 0);\
        \}\
    \}\
    // now append to head\
    document.head.appendChild( script );\
\}\
\
10. So far, we've been manipulating the head of our document; adding scripts in dynamically and setting up the foundation for what we will be doing in the body here on out.\
\
11. Now we're going to create an object to do all our manipulating of the DOM so we can reuse the functions over and over again. This will be our first class, or even a little library if you will.\
\
So we'll open the body.js file and create our class.\
function domManipulator() \{\
\
\}\
\
12. So let's create the methods for doing CRUD on the DOM. CRUD works on the DOM because as I've said, it's essentially just a data object that we manipulate it's stored values.\
\
    var body = document.body;\
\
    this.createElement = function( type, id, tar ) \{\
        // create element on the body using the traditional method\
        var newElement = document.createElement( type );\
        // check to see if there is a target and if so append it\
        if ( tar ) \{\
            document.getElementById( tar ).appendChild( newElement );\
        \} else \{\
            body.appendChild( newElement );\
        \}\
        // now change the id to desired value\
        newElement.setAttribute( 'id', id );\
        // return true so conditionals will work\
        return true;\
    \}\
\
    this.updateElement = function( tar, properties, value) \{\
        // 9 expand method to take array of properties\
        if ( typeof properties === 'string') \{\
            document.getElementById( tar )[properties] = value;\
        \} else \{\
            // set target as base for changing property\
            var baseTarget = document.getElementById( tar );\
            // loop through properties to build path to property to change\
            for ( var p = 0; p < properties.length; p++ ) \{\
                // check to see if we've reached the end, if so\
                // that the full path and set value\
                if ( p === ( properties.length - 1 )) \{\
                    // set value\
                    baseTarget[ properties [ p ] ] = value;\
                \} else \{\
                    // if not keep building path\
                    baseTarget = baseTarget[ properties[ p ] ];\
                \}\
            \}\
        \}\
    \}\
\
    this.moveElement = function( mover, moveTo ) \{\
        // get the mover\
        var moverObj = document.getElementById( mover );\
        // remove mover\
        this.deleteElement( mover );\
        // append to moveTo target\
        document.getElementById( moveTo ).appendChild( moverObj );\
    \}\
\
    this.setAttr = function( target, attribute, value) \{\
        document.getElementById( target ).setAttribute( attribute, value );\
    \}\
\
    this.addOption = function( tar, value ) \{\
        var select = document.getElementById( tar );\
        var option = document.createElement( "option" );\
        option.text = value;\
        select.add(option);\
    \}\
\
    this.deleteElement = function( target ) \{\
        // get element to delete\
        var deleteElement = document.getElementById( target );\
        if ( deleteElement ) \{\
            deleteElement.parentNode.removeChild( deleteElement );\
        \}\
    \}\
\
13. Now that we have our library for DOM manipulations, let's create and manipulate some DOM elements. Open body_controller.js so we can add some things in. \
\
For loading order and also for display, let's set all this to wait until we know all the scripts are loaded.\
setTimeout( function() \{\
\}, getWait());\
\
From there we want to define our manipulator library. \
var body = new domManipulator();\
\
// remove padding and margin\
    body.updateElement( 'the_body', [ 'style', 'padding' ], '0px' );\
    body.updateElement( 'the_body', [ 'style', 'margin' ], '0px' );\
    body.updateElement(\
        'the_body',\
        [ 'style', 'backgroundImage' ],\
        'url("resources/blue_sky_green_grass-wide.jpg")'\
    );\
\
    // create status bar\
    body.createElement( 'div', 'status_bar' );\
    body.updateElement( 'status_bar', [ 'style', 'background' ], '#cccccc' );\
    body.updateElement( 'status_bar', [ 'style', 'padding' ], '5px' );\
    body.updateElement( 'status_bar', [ 'style', 'height' ], '50px' );\
\
    // add a title\
    body.createElement( 'h4', 'page_header', 'status_bar' );\
    body.updateElement( 'page_header', 'innerHTML', 'The hoppy people.' );\
    body.updateElement( 'page_header', [ 'style', 'fontFamily' ], '"Ariel"' );\
    body.updateElement( 'page_header', [ 'style', 'fontWeight' ], 'lighter' );\
    body.updateElement( 'page_header', [ 'style', 'cssFloat' ], 'left' );\
    body.updateElement( 'page_header', [ 'style', 'marginRight' ], '40px' );\
\
    // add a button\
    body.createElement( 'button', 'add_people', 'status_bar' );\
    body.setAttr( 'add_people', 'data-bind-people', 'add' );\
    body.updateElement( 'add_people', 'innerHTML', 'Add People' );\
    body.updateElement( 'add_people', [ 'style', 'width' ], '100px' );\
    body.updateElement( 'add_people', [ 'style', 'height' ], '50px' );\
    body.updateElement( 'add_people', [ 'style', 'cssFloat' ], 'left' );\
    body.updateElement( 'add_people', [ 'style', 'marginRight' ], '40px' );\
\
// add a select\
    body.createElement( 'select', 'active_person', 'status_bar' );\
    body.setAttr( 'active_person', 'data-bind-people', 'active' );\
    body.updateElement( 'active_person', [ 'style', 'width' ], '140px' );\
    body.updateElement( 'active_person', [ 'style', 'cssFloat' ], 'left' );\
    body.updateElement( 'active_person', [ 'style', 'marginRight' ], '20px' );\
    body.addOption( 'active_person', 'Select Person' );\
\
    // add a input\
    body.createElement( 'input', 'multiplier', 'status_bar' );\
    body.setAttr( 'multiplier', 'data-bind-people', 'multiplier' );\
    body.updateElement( 'multiplier', [ 'style', 'width' ], '40px' );\
    body.updateElement( 'multiplier', [ 'style', 'height' ], '50px' );\
    body.updateElement( 'multiplier', [ 'style', 'cssFloat' ], 'left' );\
    body.updateElement( 'multiplier', [ 'style', 'marginRight' ], '20px' );\
\
    // add a input\
    body.createElement( 'input', 'person_name', 'status_bar' );\
    body.setAttr( 'person_name', 'data-bind-people', 'name' );\
    body.updateElement( 'person_name', 'placeholder', 'Name' );\
    body.updateElement( 'person_name', [ 'style', 'width' ], '140px' );\
    body.updateElement( 'person_name', [ 'style', 'height' ], '50px' );\
    body.updateElement( 'person_name', [ 'style', 'cssFloat' ], 'left' );\
    body.updateElement( 'person_name', [ 'style', 'marginRight' ], '20px' );\
\
    // add a select\
    body.createElement( 'select', 'person_type', 'status_bar' );\
    body.setAttr( 'person_type', 'data-bind-people', 'type' );\
    body.updateElement( 'person_type', [ 'style', 'cssFloat' ], 'left' );\
    body.updateElement( 'person_type', [ 'style', 'marginRight' ], '40px' );\
    // add the values\
    body.addOption( 'person_type', 'totoro' );\
    body.addOption( 'person_type', 'sadam' );\
    body.addOption( 'person_type', 'wookie' );\
\
\
\

\b\fs42 Bindings
\b0\fs30 \
1. Now that we have a pretty basic interface, let's start setting up bindings to a data model. The first thing we'll need is a model, so let's create one. Open scripts hoppy_people.js. Here's the thing about our model that we'll want to plan for. It will be doing some rendering so we'll need to passing in the body manipulator we've created along with an append target. \
\
So let's create the object:\
function hoppyPeople( body, appendTo ) \{\
\
\}\
\
Since we are going to be doing some DOM bindings, let's setup a binder object. \
var binder = new dataBinder();\
\
From there, let's start building the people object with all it's properties.\
    people = \{\
        // keep a track of how many people there are\
        persons: \{\},\
        count: 0,\
        active: 0,\
        minY: 150,\
        maxY: 400,\
\
        create: function() \{\
            // get next person id\
            this.persons[ this.count ] = [];\
            var target = [];\
            // set some defaults properties for the person\
            target.height = 5;\
            target.currentX = Math.floor(Math.random() * 600) + 1;\
            target.multiplier = (Math.floor(Math.random() * 300) / 1000 ) + 1;\
            target.currentY = this.maxY;\
            target.direction = 'down';\
            attributes.name = 'totoro';\
            attributes.type = 'totoro';\
            attributes.view = document.createElement( 'div' );\
            attributes.view.innerHTML = "<div id='person" + this.count + "' class='person' style='pos\
            + "<p>" + attributes.name + "</p>"\
            + "<img src='resources/totoro.gif' />"\
            + "</div>";\
            this.persons[ this.count ] = target;\
            this.active = this.count;\
            // render\
            document.getElementById( appendTo ).appendChild( target.view );\
            setInterval( this.render.bind( this, this.count ), 1 );\
            // up the count\
            this.count++;\
            // add new person to the select list for editing\
            body.addOption( 'active_person', 'Person' + this.count, this.count );\
        \},\
\
        render: function( tar ) \{\
            var target = document.getElementById( 'person' + tar );\
            var values = this.persons[ tar ];\
            // set x & y\
            target.style.top = values.currentY + 'px';\
            target.style.left = values.currentX + 'px';\
            // since we're jumping increment y\
            if ( values.currentY < this.maxY && values.direction === 'down' ) \{\
                values.currentY++;\
            \} else if ( values.currentY > this.minY && values.direction === 'up' )\{\
                values.currentY = values.currentY - values.multiplier;\
            \} else if ( values.currentY >= this.maxY && values.direction === 'down' ) \{\
                values.direction = 'up';\
            \} else if ( values.currentY <= this.maxY && values.direction === 'up' ) \{\
                values.direction = 'down';\
            \}\
        \},\
\
        update: function(tar, property, value) \{\
            this.persons[ tar ][ property ] = value;\
        \}\
\
    \};\
\
    binder.on( 'people:change', function( evt, attr_name, new_val, initiator ) \{\
        if ( attr_name === 'active' ) \{\
            // strip person from value\
            var personNum = new_val.replace( 'Person', '' );\
\
            // set new active\
            people.active = personNum;\
\
            // update display\
            body.updateElement(\
                'multiplier',\
                'value',\
                ( people.persons[ ( people.active - 1 ) ].multiplier * 10 )\
            );\
            body.updateElement(\
                'person_name',\
                'value',\
                ( people.persons[ ( people.active - 1 ) ].name )\
            );\
            // change the select menu\
            var select = document.getElementById( 'person_type' );\
            for(var i, j = 0; i = select.options[j]; j++) \{\
                console.log( i.value, people.persons[ ( people.active - 1 ) ].type );\
                if( i.value == people.persons[ ( people.active - 1 ) ].type ) \{\
                    select.selectedIndex = j;\
                    break;\
                \}\
            \}\
        \} else if ( attr_name === 'multiplier' ) \{\
            // update the multiplier and we divid by 10 so people\
            // don't have to deal with fractions\
            people.persons[ ( people.active - 1 ) ].multiplier = new_val/10;\
        \} else if ( attr_name === 'type' ) \{\
            // changing type means we need to query for a new tempalte.\
            // request the new html\
            var html = body.getTemplate(\
                'templates/' + new_val + ".html",\
                \{ 'count':  ( people.active - 1 ) \}\
            );\
            // now append to the object that\
            var target = document.getElementById( 'person' + ( people.active - 1 ) ).parentNode;\
            target.innerHTML = html;\
            people.persons[ ( people.active - 1 ) ].type = new_val;\
        \} else if ( attr_name === 'name' ) \{\
            // update name in the model\
            people.persons[ ( people.active - 1 ) ].name = new_val;\
            // get the person div\
            var nameHolder = document.getElementById(\
                'person' + ( people.active - 1 )\
            );\
            // now find the p child and update the html\
            nameHolder.querySelector( 'p' ).innerHTML = new_val;\
        \}\
    \});\
\
   return people;\
\}\
\
\
2. Next we need to create our binder that will listen for changes and call the update methods we've created. So let's open bindings.js file and get to work. \
\
function dataBinder() \{\
\
    // Create the actual publish and subscription object\
    var pubSub = \{\
        // define an array to hold all the callbacks\
        callbacks: \{\},\
\
        // setup the subscriber method\
        on: function( target, callbackFunction ) \{\
            // check to see if the target already has a callback\
            // if not, create one and set it as an object\
            if ( !this.callbacks[ target ] ) \{\
                this.callbacks[ target ] = [];\
            \}\
            this.callbacks[ target ].push( callbackFunction );\
        \},\
\
        // setup the trigger method, calling the actuall subscribed functions\
        trigger: function(target) \{\
            // check to see if the target already has a callback\
            // if not, create one and set it as an object\
            if ( !this.callbacks[ target ] ) \{\
                this.callbacks[ target ] = [];\
            \}\
            // loop through callbacks for the target and fire the functions\
            var len = this.callbacks[ target ].length;\
            for ( var i = 0; i < len; i++) \{\
                this.callbacks[ target ][ i ].apply( this, arguments );\
            \}\
        \}\
    \}\
\
    // define a proxy method to be called on actual change\
    changeHandler = function( evt ) \{\
        var target = evt.target,\
        dataAttr = getAttrFromTarget( evt.target.id );\
\
        data_attr = dataAttr[0];\
        message = dataAttr[1] + ':change';\
\
        if ( dataAttr && dataAttr !== "" ) \{\
            pubSub.trigger( dataAttr[1] + ':change', dataAttr[0], target.value );\
        \}\
    \};\
\
    // get the target data-bind attribute\
    getAttrFromTarget = function( tar ) \{\
        var attributes = document.getElementById( tar ).attributes;\
        for ( var p = 0; p < attributes.length; p++ ) \{\
            // current attribute\
            var curAttr = attributes[ p ].name;\
            // build a substring to do check against\
            if ( typeof curAttr === 'string' ) \{\
                var subStr = curAttr.substring( 0, 9 );\
                var user = curAttr.substring(10);\
                if ( subStr === 'data-bind' ) \{\
                    return [ attributes[ p ].value, user ];\
                \}\
            \}\
        \}\
    \};\
\
    // Listen to change events and proxy to PubSub\
    if ( document.addEventListener ) \{\
        document.addEventListener( "change", changeHandler, false );\
    \}\
\
    return pubSub;\
\}\
\
3. The last thing we need to do is open body_controller.js and instantiate the the people object.\
var people = new hoppyPeople( body, 'the_body' );\
\

\b\fs42 Templating & Ajax
\b0\fs30 \
1. Now, there are two more pieces we need before our little program is done. We need to handle templates, which requires Ajax, and then finally a listener. \
\
First thing, let's create  little Ajax method so open ajax.js.\
function ajax() \{\
\
    // build request object\
    var request = new XMLHttpRequest();\
    var requestType = 'GET';\
\
    // create make a request method\
    this.makeRequest = function( path ) \{\
        request.open( requestType, path, false);\
        request.send(null);\
        return request.responseText;\
    \}\
\}\
\
2. Now let's add a templating method to our DOM manipulator library. Open body.js.\
    this.getTemplate = function( template, options ) \{\
        var requestor = new ajax();\
        // make request for template\
        var html = requestor.makeRequest( template );\
        // replace all the options in the template with their values\
        for ( var pos in options ) \{\
            var tempPatt = new RegExp( '\{\{' + pos + '\}\}', 'g' );\
            html = html.replace(tempPatt, options[ pos ] );\
        \}\
        return html;\
    \}\
\
3. The templates: Just open one or two\
\

\b\fs42 Listeners
\b0\fs30 \
\
20. Now let's talk Listeners which will be the next thing we focus on. You can set a listener on any part of the DOM for any event action. Such as the head, body, specific dom elements; on change, mouse movements, clicks and so fourth. \
\
In our listeners.js document, we're going to create a simple Class that can be used to instantiate listeners.\
function listenerHandler() \{\
\
    listen = \{\
        create: function( tar, method, func ) \{\
            var element = document.getElementById( tar );\
            element.addEventListener( method, func, false );\
        \}\
    \}\
\
    return listen;\
\}\
\
Simple as that, we now have an object that can easily create listeners on anything we pass it. \
\
From here we need to instantiate the object so we can use it, then actually use it. So open body_controller.js and instantiate the listenerHanlder.\
var listeners = new listenerHandler();\
\
Then create  listener for our button click. \
    // create a listener for the button\
    listeners.create( 'add_people', 'mousedown', function( e ) \{\
        people.create();\
    \});\
\
\

\b\fs42 One last thing
\b0\fs30 \
33. But wait, there's more. \
I've got one more treat I want to show you and that involves the querySelector and querySelectorAll built in methods to JS. Let's add two new methods to our body.js class. \
\
    this.findOne = function( tar ) \{\
        var found = document.querySelector( tar );\
        if ( found ) \{\
            return found;\
        \}\
    \}\
\
    this.findAll = function( tar ) \{\
        var found = document.querySelectorAll( tar );\
        if ( found ) \{\
            return found;\
        \}\
    \}\
\
These are pretty obvious by their names, but what can we do with them? Let's add some code to our body_controller.js file. First for findOne and then findAll. \
        var match = body.findOne( '#status_bar' );\
        console.log( 'match',  match );\
        match.style.backgroundColor = 'red';\
\
        var inputs = body.findAll( '#person' );\
        for ( var pos in inputs ) \{\
            if ( inputs[ pos ].style ) \{\
                inputs[ pos ].style.border = '1px solid';\
                console.log( 'input ' + pos, inputs[ pos ] );\
            \}\
        \}\
\
Some of the power of jQuery's selector method right here. \
\
34. Finally, using all this code, I've built this application. \
\

\fs24 \
\
\
\
\
\
\
}